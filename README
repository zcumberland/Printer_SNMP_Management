# Printer Monitoring Server Installation Guide

This guide will walk you through installing the printer monitoring server on an Ubuntu system.

## Prerequisites

- Ubuntu 20.04 LTS or newer
- Root/sudo privileges
- Internet connection
- Domain name (optional, for production use)

## Option 1: Automated Installation (Recommended)

### 1. Download the installation script

```bash
curl -o install.sh https://raw.githubusercontent.com/zcumberland/Printer_SNMP_Management/main/Server/install.sh
```

### 2. Make the script executable

```bash
chmod +x install.sh
```

### 3. Run the installation script

```bash
./install.sh
```

### 4. Secure your configuration

After installation, edit the environment configuration file to set secure passwords:

```bash
nano ~/printer-monitor/.env
```

Change the following values:

- `DB_PASSWORD`: A secure database password
- `JWT_SECRET`: A long, random string for JWT token signing
- `DEFAULT_ADMIN_PASSWORD`: A secure password for the admin user

### 5. Restart the services to apply changes

```bash
cd ~/printer-monitor
docker-compose restart
```

## Option 2: Manual Installation

If you prefer to install the components manually, follow these steps:

### 1. Install system dependencies

```bash
sudo apt update
sudo apt upgrade -y
sudo apt install -y docker.io docker-compose git curl nginx
```

### 2. Set up Docker

```bash
sudo systemctl enable docker
sudo systemctl start docker
sudo usermod -aG docker $USER
# Log out and log back in for this to take effect
```

### 3. Create the directory structure

```bash
mkdir -p ~/printer-monitor
cd ~/printer-monitor
mkdir -p models routes middleware
```

### 4. Clone the repository code

```bash
git clone https://github.com/zcumberland/Printer_SNMP_Management.git temp
cp -r temp/Server/* .
rm -rf temp
```

### 5. Create configuration files

Create the `.env` file:

```bash
cat > .env << EOF
# Database Configuration
DB_USER=postgres
DB_PASSWORD=your_secure_password
DB_NAME=printer_monitor

# JWT Configuration
JWT_SECRET=your_secure_jwt_key

# Admin User
DEFAULT_ADMIN_USERNAME=admin
DEFAULT_ADMIN_PASSWORD=your_secure_admin_password
DEFAULT_ADMIN_EMAIL=admin@example.com
EOF
```

Create the `Dockerfile`:

```bash
cat > Dockerfile << 'EOF'
FROM node:16-alpine

WORKDIR /app

# Copy package.json and install dependencies
COPY package*.json ./
RUN npm ci --only=production

# Create directory structure
RUN mkdir -p models routes middleware

# Copy server code
COPY server.js .
COPY models/ models/
COPY routes/ routes/
COPY middleware/ middleware/

# Expose the port
EXPOSE 3000

# Start the server
CMD ["node", "server.js"]
EOF
```

Create the `docker-compose.yml` file:

```bash
cat > docker-compose.yml << 'EOF'
version: '3'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: printer-monitor-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres_password}
      - DB_HOST=db
      - DB_NAME=${DB_NAME:-printer_monitor}
      - DB_PORT=5432
      - JWT_SECRET=${JWT_SECRET:-change_this_in_production}
      - DEFAULT_ADMIN_USERNAME=${DEFAULT_ADMIN_USERNAME:-admin}
      - DEFAULT_ADMIN_PASSWORD=${DEFAULT_ADMIN_PASSWORD:-admin123}
      - DEFAULT_ADMIN_EMAIL=${DEFAULT_ADMIN_EMAIL:-admin@example.com}
    depends_on:
      - db
    networks:
      - printer-monitor-network

  db:
    image: postgres:14-alpine
    container_name: printer-monitor-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres_password}
      - POSTGRES_DB=${DB_NAME:-printer_monitor}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - printer-monitor-network

networks:
  printer-monitor-network:
    driver: bridge

volumes:
  postgres_data:
EOF
```

### 6. Configure Nginx

Create an Nginx configuration file:

```bash
sudo nano /etc/nginx/sites-available/printer-monitor
```

Add the following content:

```nginx
server {
    listen 80;
    server_name your-domain.com;  # Replace with your domain or server IP

    location /api/ {
        proxy_pass http://localhost:3000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location / {
        proxy_pass http://localhost:3000/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
```

Enable the site and restart Nginx:

```bash
sudo ln -sf /etc/nginx/sites-available/printer-monitor /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl restart nginx
```

### 7. Build and start the Docker containers

```bash
cd ~/printer-monitor
docker-compose build
docker-compose up -d
```

## Post-Installation Steps

### 1. Secure your server with SSL (recommended for production)

Install Certbot and obtain an SSL certificate:

```bash
sudo apt install -y certbot python3-certbot-nginx
sudo certbot --nginx -d your-domain.com
```

### 2. Set up a firewall

```bash
sudo ufw enable
sudo ufw allow 'Nginx Full'
sudo ufw allow ssh
```

### 3. Access the web interface

Visit your server in a web browser:

- http://your-domain.com (or https:// if you set up SSL)
- or http://your-server-ip if you don't have a domain

Log in with the admin credentials specified in your .env file:

- Username: admin
- Password: (the one you set in the .env file)

## Integrating Agents with the Server

To connect your SNMP agents to the server, you'll need to update your Python agent code to include the server integration module.

### Adding server integration to your agent

1. Copy the `agent_integration.py` file to your agent directory
2. Import and use the ServerIntegration class in your agent code:

```python
from agent_integration import ServerIntegration

# Initialize server connection
server = ServerIntegration(
    server_url="http://your-server-url.com",
    agent_name="Customer Site Name"
)

# Register with server
server.register()

# When you discover a printer, send its data to the server
def on_printer_discovered(printer_data):
    server.send_printer_data(printer_data)

# When you collect metrics, send them to the server
def on_metrics_collected(printer_id, metrics_data):
    server.send_metrics(printer_id, metrics_data)
```

## Troubleshooting

### Check container status

```bash
docker ps
docker-compose ps
```

### View container logs

```bash
docker-compose logs api
docker-compose logs db
```

### Database issues

Connect to the database container:

```bash
docker exec -it printer-monitor-db psql -U postgres -d printer_monitor
```

Check if tables were created:

```sql
\dt
```

### Restart the services

```bash
cd ~/printer-monitor
docker-compose restart
```

## Maintenance

### Updating the server

Pull the latest code and rebuild:

```bash
cd ~/printer-monitor
git pull origin main
docker-compose down
docker-compose build
docker-compose up -d
```

### Backing up the database

```bash
cd ~/printer-monitor
docker exec -t printer-monitor-db pg_dumpall -c -U postgres > backup.sql
```

### Restoring the database from backup

```bash
cat backup.sql | docker exec -i printer-monitor-db psql -U postgres
```
